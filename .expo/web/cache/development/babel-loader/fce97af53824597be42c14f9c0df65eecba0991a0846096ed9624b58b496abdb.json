{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport MenuRetornar from \"../../components/menuretornar\";\nimport MapView, { Marker } from 'react-native-maps';\nimport MapViewDirections from 'react-native-maps-directions';\nimport { useState, useEffect } from \"react\";\nimport routeWeekly from \"../../assets/routes/output_weekly.json\";\nimport routeAll from \"../../assets/routes/output_all.json\";\nimport startIcon from \"../../assets/imagens/inicio.png\";\nimport midIcon from \"../../assets/imagens/meio.png\";\nimport finalIcon from \"../../assets/imagens/fim.png\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function RoutesMap(_ref) {\n  var route = _ref.route;\n  var routeData = route.params.routeData;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    routeList = _useState2[0],\n    setRouteList = _useState2[1];\n  var _useState3 = useState({}),\n    _useState4 = _slicedToArray(_useState3, 2),\n    origin = _useState4[0],\n    setOrigin = _useState4[1];\n  var _useState5 = useState({}),\n    _useState6 = _slicedToArray(_useState5, 2),\n    destination = _useState6[0],\n    setDestination = _useState6[1];\n  var _useState7 = useState([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    waypoints = _useState8[0],\n    setWayPoints = _useState8[1];\n  var chooseRouteType = function chooseRouteType(routeType) {\n    if (routeType === \"PF - Semanal / Quinzenal\") {\n      return routeAll;\n    } else {\n      return routeWeekly;\n    }\n  };\n  var handleGeocode = function () {\n    var _ref2 = _asyncToGenerator(function* (address) {\n      try {\n        var response = yield fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${process.env.EXPO_PUBLIC_GEOCODE_API_KEY}`);\n        var data = yield response.json();\n        if (data.results.length > 0) {\n          var _data$results$0$geome = data.results[0].geometry.location,\n            lat = _data$results$0$geome.lat,\n            lng = _data$results$0$geome.lng;\n          return {\n            latitude: parseFloat(lat),\n            longitude: parseFloat(lng)\n          };\n        } else {\n          Alert.alert('Endereço não encontrado');\n        }\n      } catch (error) {\n        console.error('Erro ao converter endereço:', error);\n      }\n    });\n    return function handleGeocode(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    var fetchData = function () {\n      var _ref3 = _asyncToGenerator(function* () {\n        var chosenJSON = chooseRouteType(routeData.routeType);\n        var chosenVehicle = chosenJSON[routeData.vehicle];\n        var chosenDay = chosenVehicle[routeData.day];\n        var routes = chosenDay[\"Route\"];\n        var markers = yield Promise.all(routes.map(function () {\n          var _ref4 = _asyncToGenerator(function* (route, index) {\n            var coordinates = yield handleGeocode(route[\"Departure address\"]);\n            if (index === 0) {\n              setOrigin(coordinates);\n              return _jsx(Marker, {\n                image: startIcon,\n                coordinate: coordinates,\n                title: route[\"Departure address\"],\n                description: `Início: ${route[\"From\"][\"type\"]}`\n              }, index);\n            } else if (index === routes.length - 1) {\n              setDestination(coordinates);\n              return _jsx(Marker, {\n                image: finalIcon,\n                coordinate: coordinates,\n                title: route[\"Departure address\"],\n                description: `Fim: ${route[\"From\"][\"type\"]}`\n              }, index);\n            } else {\n              setWayPoints([].concat(_toConsumableArray(waypoints), [coordinates]));\n              return _jsx(Marker, {\n                image: midIcon,\n                coordinate: coordinates,\n                title: route[\"Departure address\"],\n                description: `Intermediário: ${route[\"From\"][\"type\"]}`\n              }, index);\n            }\n          });\n          return function (_x2, _x3) {\n            return _ref4.apply(this, arguments);\n          };\n        }()));\n        setRouteList(markers);\n      });\n      return function fetchData() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    fetchData();\n  }, []);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(MenuRetornar, {\n      options: [{\n        title: 'Rotas de Coleta',\n        voltar: 'RotasColeta'\n      }]\n    }), _jsxs(MapView, {\n      style: styles.map,\n      initialRegion: {\n        latitude: -22.2871,\n        longitude: -42.5337,\n        latitudeDelta: 0.005,\n        longitudeDelta: 0.005\n      },\n      children: [routeList, _jsx(MapViewDirections, {\n        origin: `${origin.latitude},${origin.longitude}`,\n        waypoints: waypoints,\n        destination: `${destination.latitude},${destination.longitude}`,\n        apikey: process.env.EXPO_PUBLIC_DIRECTIONS_API_KEY,\n        strokeWidth: 3,\n        strokeColor: \"hotpink\"\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#D9D9D9',\n    height: '100%',\n    display: 'flex',\n    flex: 1\n  },\n  Title: {\n    fontSize: 17,\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n    marginTop: 5\n  },\n  map: {\n    flex: 1,\n    width: \"100%\"\n  }\n});","map":{"version":3,"names":["MenuRetornar","MapView","Marker","MapViewDirections","useState","useEffect","routeWeekly","routeAll","startIcon","midIcon","finalIcon","jsx","_jsx","jsxs","_jsxs","RoutesMap","_ref","route","routeData","params","_useState","_useState2","_slicedToArray","routeList","setRouteList","_useState3","_useState4","origin","setOrigin","_useState5","_useState6","destination","setDestination","_useState7","_useState8","waypoints","setWayPoints","chooseRouteType","routeType","handleGeocode","_ref2","_asyncToGenerator","address","response","fetch","encodeURIComponent","process","env","EXPO_PUBLIC_GEOCODE_API_KEY","data","json","results","length","_data$results$0$geome","geometry","location","lat","lng","latitude","parseFloat","longitude","Alert","alert","error","console","_x","apply","arguments","fetchData","_ref3","chosenJSON","chosenVehicle","vehicle","chosenDay","day","routes","markers","Promise","all","map","_ref4","index","coordinates","image","coordinate","title","description","concat","_toConsumableArray","_x2","_x3","View","style","styles","container","children","options","voltar","initialRegion","latitudeDelta","longitudeDelta","apikey","EXPO_PUBLIC_DIRECTIONS_API_KEY","strokeWidth","strokeColor","StyleSheet","create","backgroundColor","height","display","flex","Title","fontSize","fontWeight","textAlign","marginTop","width"],"sources":["C:/Users/victo/Desktop/rotas-tcc/screens/routeMap/routeMap.js"],"sourcesContent":["import { View, StyleSheet, ScrollView, Text, Alert } from \"react-native\";\r\nimport MenuRetornar from \"../../components/menuretornar\";\r\n\r\nimport MapView, { Marker } from 'react-native-maps';\r\nimport MapViewDirections from 'react-native-maps-directions';\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport routeWeekly from \"../../assets/routes/output_weekly.json\"\r\nimport routeAll from \"../../assets/routes/output_all.json\"\r\n\r\nimport startIcon from \"../../assets/imagens/inicio.png\"\r\nimport midIcon from \"../../assets/imagens/meio.png\"\r\nimport finalIcon from \"../../assets/imagens/fim.png\"\r\n\r\nexport default function RoutesMap({ route }) {\r\n    const routeData = route.params.routeData\r\n    const [routeList, setRouteList] = useState([])\r\n    const [origin, setOrigin] = useState({})\r\n    const [destination, setDestination] = useState({})\r\n    const [waypoints, setWayPoints] = useState([])\r\n\r\n    const chooseRouteType = (routeType) => {\r\n        if (routeType === \"PF - Semanal / Quinzenal\"){\r\n            return routeAll\r\n        }\r\n        else{\r\n            return routeWeekly\r\n        }\r\n    }\r\n\r\n    const handleGeocode = async (address) => {\r\n        try {\r\n            const response = await fetch(\r\n                `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(\r\n                    address\r\n                )}&key=${process.env.EXPO_PUBLIC_GEOCODE_API_KEY}`\r\n            );\r\n\r\n            const data = await response.json();\r\n\r\n            if (data.results.length > 0) {\r\n                const { lat, lng } = data.results[0].geometry.location;\r\n                return { latitude: parseFloat(lat), longitude: parseFloat(lng) };\r\n            } else {\r\n                Alert.alert('Endereço não encontrado');\r\n            }\r\n        } catch (error) {\r\n            console.error('Erro ao converter endereço:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const chosenJSON = chooseRouteType(routeData.routeType)\r\n            const chosenVehicle = chosenJSON[routeData.vehicle]\r\n            const chosenDay = chosenVehicle[routeData.day]\r\n            const routes = chosenDay[\"Route\"];\r\n\r\n            const markers = await Promise.all(routes.map(async (route, index) => {\r\n                const coordinates = await handleGeocode(route[\"Departure address\"]);\r\n\r\n                if (index === 0){\r\n                    setOrigin(coordinates)\r\n                    return <Marker\r\n                        key={index}\r\n                        image={startIcon}\r\n                        coordinate={coordinates}\r\n                        title={route[\"Departure address\"]}\r\n                        description={`Início: ${route[\"From\"][\"type\"]}`}\r\n                    />;\r\n                }\r\n                else if (index === routes.length-1){\r\n                    setDestination(coordinates)\r\n                    return <Marker\r\n                        key={index}\r\n                        image={finalIcon}\r\n                        coordinate={coordinates}\r\n                        title={route[\"Departure address\"]}\r\n                        description={`Fim: ${route[\"From\"][\"type\"]}`}\r\n                    />;\r\n                }\r\n                else{\r\n                    setWayPoints([...waypoints, coordinates])\r\n                    return <Marker\r\n                        key={index}\r\n                        image={midIcon}\r\n                        coordinate={coordinates}\r\n                        title={route[\"Departure address\"]}\r\n                        description={`Intermediário: ${route[\"From\"][\"type\"]}`}\r\n                    />;\r\n                }\r\n                \r\n            }));\r\n\r\n            setRouteList(markers);\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <MenuRetornar options={[{ title: 'Rotas de Coleta', voltar: 'RotasColeta' }]} />\r\n\r\n            <MapView\r\n                style={styles.map}\r\n                initialRegion={{\r\n                    latitude: -22.2871,\r\n                    longitude: -42.5337,\r\n                    latitudeDelta: 0.005,\r\n                    longitudeDelta: 0.005\r\n                }}\r\n            >\r\n                {routeList}\r\n\r\n                <MapViewDirections\r\n                    origin={`${origin.latitude},${origin.longitude}`}\r\n                    waypoints={waypoints}\r\n                    destination={`${destination.latitude},${destination.longitude}`}\r\n                    apikey={process.env.EXPO_PUBLIC_DIRECTIONS_API_KEY}\r\n                    strokeWidth={3}\r\n                    strokeColor=\"hotpink\"\r\n                />\r\n            </MapView>\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n\r\n    container: {\r\n        backgroundColor: '#D9D9D9',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flex: 1,\r\n        // justifyContent: \"center\" \r\n    },\r\n    Title: {\r\n        fontSize: 17,\r\n        fontWeight: \"bold\",\r\n        textAlign: \"center\",\r\n        marginTop: 5\r\n    },\r\n    map: {\r\n        flex: 1,\r\n        width: \"100%\",\r\n    }\r\n});\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}